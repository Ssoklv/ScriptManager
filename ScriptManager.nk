NoOp {
 name ScriptManager
 knobChanged "import ast\nnodeName = nuke.thisNode()\nknobName = nuke.thisKnob()\nif knobName.name() == \"groups\":\n    current_string = nodeName.knob(\"groups\").getText()\n    strToLst = current_string.split(\", \")\n    nodeName.knob(\"selectGroup\").setValues(strToLst)\n\nif knobName.name() == \"selectGroup\":\n    current_value = nodeName.knob(\"selectGroup\").value()\n    current_tag = nodeName.knob(current_value).getText()\n    tagToDict = ast.literal_eval(current_tag)\n    colorKnob = nodeName.knob(\"backdropColor\")\n    colorKnob.setValue(int(tagToDict\['color']))\n    iconKnob = nodeName.knob('iconPath')\n    iconKnob.setText(tagToDict\['iconName'])"
 tile_color 0x222222ff
 selected true
 xpos -149
 ypos 48
 addUserKnob {20 ScriptManager t "a few helpful functions to optimize your script"}
 addUserKnob {4 localizeMode l "Localization mode" M {on "from auto-localize path" "on demand" off "" ""}}
 localizeMode "on demand"
 addUserKnob {22 updateLocalization l "Update mode" t "Updates localization mode for all \"Read\"-type nodes within your selection" -STARTLINE T "ScriptManager = nuke.thisNode()\nupdateValue = ScriptManager.knob('localizeMode').getValue()\n\nfor node in nuke.selectedNodes():\n    if node.Class() == 'Read' or node.Class() == 'ReadGeo' or node.Class() == 'ReadGeo2':\n        node.knob('localizationPolicy').setValue(int(updateValue))"}
 addUserKnob {22 turnoffGPU l "Disable \"useGPU\"" t "disables \"useGPUIFAvailable\" knob for selected nodes" T "for node in nuke.selectedNodes():\n    try:\n        node.knob('useGPUIfAvailable').setValue(0)\n    except:\n        pass" +STARTLINE}
 addUserKnob {22 turnonGPU l "Enable \"useGPU\"" t "enables \"useGPUIFAvailable\" knob for selected nodes" -STARTLINE T "for node in nuke.selectedNodes():\n    try:\n        node.knob('useGPUIfAvailable').setValue(1)\n    except:\n        pass"}
 addUserKnob {26 ""}
 addUserKnob {26 nodeDescript l "" +STARTLINE T "!!!Maintain the name unchanged!!!\nThis node operates without expressions, \nso ensure it remains named \"ScriptManager\" to enable proper function."}
 addUserKnob {20 renderSwitchesTab l "Render Switch"}
 addUserKnob {6 switchColor_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {26 switchDescription l "" +STARTLINE T "Create the initial Render Switch by pressing \"Create first switch\", copy and paste it throughout the script\n\n0 - input used for local work\n1 - input used for render"}
 addUserKnob {26 ""}
 addUserKnob {22 switchCreate l "Create first switch" T "newNode = nuke.createNode('Switch', inpanel = False)\nnewNode.setInput(0, None)\ntextKnob = nuke.String_Knob('scriptManagerTag')\ntextKnob.setText('SM_tagged') #creates a tag for distinguishing the node\ntextKnob.setVisible(False)\nnewNode.addKnob(textKnob)\n\ndeleteTag = nuke.PyScript_Knob('Stop tracking')\ndeleteTag.setValue(\"nuke.thisNode().knob('scriptManagerTag').setText(None)\") #deletes the tag\nnewNode.addKnob(deleteTag)\n\nreturnTag = nuke.PyScript_Knob('Resume tracking')\nreturnTag.setValue(\"nuke.thisNode().knob('scriptManagerTag').setText('SM_tagged')\") #adds the tag back\nnewNode.addKnob(returnTag)\n\nnewNode.knob('name').setValue('Render Switch') #node_name\nnewNode.knob('tile_color').setValue(572662527) #node_color\nnewNode.knob('which').setExpression('\$gui')\nnewNode.knob('label').setValue('GUI')" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {4 renderMode l "Render Mode" t "Choose the rendering mode according to your NUKE environment: \"Render farm\" operates with the \"\$gui\" variable and is exclusively compatible with render farms, whereas \"Local\" utilizes \"nuke.executing()\" and functions with both local and farm renders." M {"Render farm" Local ""}}
 addUserKnob {22 updateState l "Update Render Mode" t "Updates the expression that is used in all of the tracked \"Render Switch\" nodes" -STARTLINE T "ScriptManager = nuke.thisNode()\nRenderModeValue = ScriptManager.knob('renderMode').value()\nfor node in nuke.allNodes('Switch'):\n    if node.knob('scriptManagerTag') and node.knob('scriptManagerTag').getValue() == 'SM_tagged':\n        if RenderModeValue == 'Render farm':\n            node.knob('which').setExpression('!\$gui')\n            node.knob('label').setValue('GUI')\n        else:\n            node.knob('which').setExpression('\[python nuke.executing()]')\n            node.knob('label').setValue('EXECUTING')"}
 addUserKnob {40 switchColor l "" +STARTLINE}
 switchColor 0xff5555ff
 addUserKnob {22 switchColorUpdate l "Update Switch Color" t "Updates the node color for all currently tracked \"Render Switch\" nodes" -STARTLINE T "ScriptManager = nuke.thisNode()\nSwitchColorValue = ScriptManager.knob('switchColor').value()\nfor node in nuke.allNodes('Switch'):\n    if node.knob('scriptManagerTag') and node.knob('scriptManagerTag').getValue() == 'SM_tagged':\n        node.knob('tile_color').setValue(SwitchColorValue)"}
 addUserKnob {26 ""}
 addUserKnob {22 SwitchBookmarkOn l "Turn on bookmarks" t "Turns on bookmarks for tracked Render Switch nodes" T "ScriptManager = nuke.toNode('ScriptManager')\nfor node in nuke.allNodes('Switch'):\n    if node.knob('scriptManagerTag') and node.knob('scriptManagerTag').getValue() == 'SM_tagged':\n        node.knob('bookmark').setValue(1)" +STARTLINE}
 addUserKnob {22 SwitchBookmarkOff l "Turn off bookmarks" t "Turns off bookmarks for tracked Render Switch nodes" T "ScriptManager = nuke.toNode('ScriptManager')\nfor node in nuke.allNodes('Switch'):\n    if node.knob('scriptManagerTag') and node.knob('scriptManagerTag').getValue() == 'SM_tagged':\n        node.knob('bookmark').setValue(0)" +STARTLINE}
 addUserKnob {20 backdropMenu l Backdrops t "Backdrops management"}
 addUserKnob {6 s_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {1 groups l Groups t "a list of specified groups" +DISABLED}
 addUserKnob {22 getGroupName l "Add Group" t "adds a Group" T "groupInput = nuke.getInput('Add Group')\nif groupInput:\n    current_string = nuke.thisNode().knob('groups').getText()\n    if groupInput.isdigit():\n        nuke.message(\"Group name can't be a number!\")\n    else:\n        strToLst = current_string.split(\", \")\n        if groupInput in current_string:\n            nuke.message(\"This group already exists!\")\n        else:\n            attr_holder = nuke.String_Knob(groupInput)\n            attr_holder.setText('\{\"label\" : \"%s\", \"color\" : \"290649088\", \"iconName\" : \"Roto.png\"\}' % groupInput)\n            attr_holder.setEnabled(False)\n            attr_holder.setVisible(False)\n            nuke.thisNode().addKnob(attr_holder)\n            strToLst.append(groupInput)\n            new_string = ', '.join(strToLst)\n            if new_string\[0:2] == ', ':\n                string_format = new_string.replace(new_string\[0:2], '')\n                addGroup = nuke.thisNode().knob('groups').setText(string_format)\n            else:\n                addGroup = nuke.thisNode().knob('groups').setText(new_string)\n" +STARTLINE}
 addUserKnob {22 clearGroup l "Clear Group" t "clears a specified Group" -STARTLINE T "clearInput = nuke.getInput('Clear Group')\nif clearInput:\n    current_string = nuke.thisNode().knob('groups').getText()\n    if clearInput.isdigit():\n        nuke.message(\"Group name can't be a number!\")\n    else:\n        strToLst = current_string.split(\", \")\n        if clearInput in current_string:\n            try:\n                strToLst.remove(' ' + clearInput)\n            except:\n                strToLst.remove(clearInput)\n            attr_holder = nuke.thisNode().knob(clearInput)\n            nuke.thisNode().removeKnob(attr_holder)\n            new_string = ', '.join(strToLst)\n            if new_string\[0:2] == ', ':\n                string_format = new_string.replace(new_string\[0:1], '')\n                addGroup = nuke.thisNode().knob('groups').setText(string_format)\n            else:\n                addGroup = nuke.thisNode().knob('groups').setText(new_string)\n        else:\n            nuke.message(\"This group doesn't exist!\")"}
 addUserKnob {22 clearAllGroups l "Clear All Groups" t "clears the \"Groups\" list" -STARTLINE T "current_string = nuke.thisNode().knob('groups').getText()\nstrToLst = current_string.split(\", \")\nfor n in strToLst:\n    if n\[0] == ' ':\n        n = n.replace(n\[0], '')\n    try:\n        knob = nuke.thisNode().knob(n)\n        nuke.thisNode().removeKnob(knob)\n    except:\n        pass\n\nnuke.thisNode().knob('groups').setText(None)\nnuke.thisNode().knob('backdropColor').setValue(000000000)\nnuke.thisNode().knob('iconPath').setText('')"}
 addUserKnob {26 ""}
 addUserKnob {4 selectGroup l "Select Group" M {""}}
 addUserKnob {40 backdropColor l "" t "Specify Group color" -STARTLINE}
 addUserKnob {1 iconPath l "Icon Path" t "Insert a file name from \".../Nuke/plugins/icons\". Example: \"Roto.png\"\nThis example references a \"Roto\" class icon"}
 addUserKnob {22 updateTagState l "Update Group settings" t "Update default Group attributes specified in knobs above" T "import ast\nnode = nuke.thisNode()\ncurrentGroup = node.knob('selectGroup').value()\nnewIconPath = node.knob('iconPath').getText()\nnewColor = node.knob('backdropColor').value()\n\ntagKnob = node.knob(currentGroup)\ntagValue = tagKnob.getText()\nstrToDict = ast.literal_eval(tagValue)\n\nstrToDict\['color'] = newColor\nstrToDict\['iconName'] = newIconPath\n\nfor n in nuke.allNodes('BackdropNode'):\n    if n.knob('tagHolder').getText() == currentGroup:\n        n.knob('tile_color').setValue(newColor)\n        n.knob('label').setValue(f'<img src = \"\{newIconPath\}\">\\n\{currentGroup\}')\n    else:\n        pass\n\ntagKnob.setText(str(strToDict))" +STARTLINE}
 addUserKnob {22 nodeConvert l "Convert Backdrop" t "Adds selected Backdrops into the group specified in \"Select Group\" area" -STARTLINE T "node = nuke.thisNode()\ncurrentGroup = node.knob('selectGroup').value()\n\ntagHolder = nuke.String_Knob('tagHolder')\ntagTab = nuke.Tab_Knob('tagTab')\nfor n in nuke.selectedNodes('BackdropNode'):\n    if n.knob('tagHolder'):\n        n.knob('tagHolder').setText(currentGroup)\n        n.knob('label').setValue(currentGroup)\n        n.knob('tagHolder').setVisible(False)\n        userKnob = n.knob('User')\n    else:\n        n.addKnob(tagTab)\n        n.addKnob(tagHolder)\n        n.knob('tagHolder').setText(currentGroup)\n        n.knob('label').setValue(currentGroup)\n        n.knob('tagHolder').setVisible(False)\n        n.knob('tagTab').setFlag(0)\n        userKnob = n.knob('User')"}
 addUserKnob {26 bookmarkControl l "" +STARTLINE}
 addUserKnob {22 bookmarksOn l "Turn on bookmarks" t "turns on bookmarks for selected \"Backdrop\" nodes" T "selection = nuke.selectedNodes('BackdropNode')\nfor i in selection:\n    i\['bookmark'].setValue(1)" +STARTLINE}
 addUserKnob {22 bookmarksOff l "Turn off bookmarks" t "turns off bookmarks for selected \"Backdrop\" nodes" T "selection = nuke.selectedNodes('BackdropNode')\nfor i in selection:\n    i\['bookmark'].setValue(0)" +STARTLINE}
 addUserKnob {26 ""}
}
